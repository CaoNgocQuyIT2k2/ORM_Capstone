import compress_images from 'compress-images'
import initModels from "../models/init-models.js";
import { responseData } from "../config/response.js";
import sequelize from "../models/connect.js";
import bcrypt from "bcrypt";
import { decodeToken } from "../config/JWT.js";
let model = initModels(sequelize);

export const getUser = async (req, res) => {
  try {
    let data = await model.nguoi_dung.findAll();
    responseData(res, "Th√†nh c√¥ng", data, 200);
  } catch {
    responseData(res, "l·ªói ...", "", 400);
  }
};

export const getSavedImageByUser = async (req, res) => {
  try {
    let { token } = req.headers;
    let dToken = decodeToken(token);
    console.log("Decoded Token:", dToken);
    let { nguoi_dung_id } = dToken.data;
    console.log("üöÄ ~ dToken.data;:", dToken.data);

    let data = await model.luu_anh.findAll({
      where: {
        nguoi_dung_id,
      },
      include: [
        {
          model: model.hinh_anh,
          as: 'hinh',
        },
      ],
    });

    console.log(data); // Ki·ªÉm tra d·ªØ li·ªáu b·∫°n nh·∫≠n ƒë∆∞·ª£c t·ª´ c∆° s·ªü d·ªØ li·ªáu
    let luuAnhList = data.map(luuAnh => luuAnh.dataValues);

    console.log(luuAnhList);

    return responseData(res, 'Nh·ªØng ·∫£nh b·∫°n ƒë√£ l∆∞u', luuAnhList, 200);
  } catch (error) {
    console.error(error);
    return responseData(res, "L·ªói...", "", 500);
  }
};

export const getCreatedImageByUser = async (req, res) => {
  try {
    let { token } = req.headers;
    let dToken = decodeToken(token);
    console.log("Decoded Token:", dToken);
    let { nguoi_dung_id } = dToken.data;
    console.log("üöÄ ~ dToken.data;:", dToken.data);

    let data = await model.hinh_anh.findAll({
      where: {
        nguoi_dung_id,
      },
    });


    return responseData(res, 'Nh·ªØng ·∫£nh b·∫°n ƒë√£ t·∫°o', data, 200);
  } catch (error) {
    console.error(error);
    return responseData(res, "L·ªói...", "", 500);
  }
};

export const deleteImageByUser = async (req, res) => {
  try {
    let { token } = req.headers;
    let dToken = decodeToken(token);
    console.log("Decoded Token:", dToken);
    let { nguoi_dung_id } = dToken.data;
    console.log("üöÄ ~ dToken.data;:", dToken.data);
    let { imageId } = req.params;

    // Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa ·∫£nh tr∆∞·ªõc khi x√≥a
    let imageToDelete = await model.hinh_anh.findOne({
      where: {
        nguoi_dung_id,
        hinh_id: imageId,
      },
    });

    if (!imageToDelete) {
      return responseData(res, 'Kh√¥ng t√¨m th·∫•y ·∫£nh ƒë·ªÉ x√≥a', '', 404);
    }

    // Th·ª±c hi·ªán x√≥a ·∫£nh
    await model.hinh_anh.destroy({
      where: {
        nguoi_dung_id,
        hinh_id: imageId,
      },
    });

    return responseData(res, '·∫¢nh ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng', '', 200);
  } catch (error) {
    console.error(error);
    return responseData(res, 'L·ªói...', '', 500);
  }
};

export const getInfo = async (req, res) => {
  try {
    let { token } = req.headers;
    let accessToken = decodeToken(token);

    let getUser = await model.nguoi_dung.findOne({
      where: {
        nguoi_dung_id: accessToken.data.nguoi_dung_id,
      },
    });

    if (!getUser) {
      responseData(res, "User kh√¥ng t·ªìn t·∫°i", "", 404);
      return;
    }

    responseData(res, "success", getUser, 200);
  } catch {
    responseData(res, "l·ªói ...", "", 500);
  }
};

export const createImage = async (req, res) => {
  try {
    let { file } = req;

    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ token
    let { token } = req.headers;
    let accessToken = decodeToken(token);
    let user_id = accessToken.data.nguoi_dung_id;
console.log("user id creat image", user_id);

    console.log("user id creat image", user_id)
    // L·∫•y th√¥ng tin t·ª´ form-data
    let mo_ta = req.body.mo_ta || "M√¥ t·∫£ t√πy √Ω";
    let ten_hinh = req.body.ten_hinh
    let duong_dan = "/public/img/" + file.filename;

    // L∆∞u th√¥ng tin v√†o b·∫£ng hinh_anh
    let createdImage = await model.hinh_anh.create({
      ten_hinh: ten_hinh,
      duong_dan: duong_dan,
      mo_ta: mo_ta,
      nguoi_dung_id: user_id,
    });
    console.log("createdImage:",createdImage)
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£
    responseData(res, "Th√™m ·∫£nh th√†nh c√¥ng", createdImage, 200);
    return;
  } catch (error) {
    console.error(error);
    responseData(res, "L·ªói...", "", 500);
  }
};

export const updateInfo = async (req, res) => {
  try {
    let { ho_ten, mat_khau, tuoi } = req.body;
    let { token } = req.headers;
    let dToken = decodeToken(token);
    console.log("Decoded Token:", dToken);
    let { nguoi_dung_id } = dToken.data;

    let getUser = await model.nguoi_dung.findOne({
      where: {
        nguoi_dung_id: nguoi_dung_id,
      },
    });
    // Ki·ªÉm tra m·∫≠t kh·∫©u tr·ªëng tr∆∞·ªõc khi hash
    if (mat_khau) {
      getUser.mat_khau = bcrypt.hashSync(mat_khau, 10);
    }

    // Ki·ªÉm tra th√¥ng tin ng∆∞·ªùi d√πng tr·ªëng tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    if (ho_ten) {
      getUser.ho_ten = ho_ten;
    }

    if (tuoi) {
      getUser.tuoi = tuoi;
    }
    console.log("Data before update:", getUser.dataValues);
    console.log("id user", getUser.dataValues.nguoi_dung_id);

    // Th·ª±c hi·ªán c√¢u l·ªánh UPDATE
    const result = await model.nguoi_dung.update(
      { ho_ten, mat_khau, tuoi },
      {
        where: {
          nguoi_dung_id: nguoi_dung_id,
        },
      }
    );
    console.log("Update result:", result);
    responseData(res, "Update th√†nh c√¥ng", "", 200);
  } catch (error) {
    console.error(error);
    responseData(res, "L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin", "", 500);
  }
};